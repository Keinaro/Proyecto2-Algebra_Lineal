import numpy as np
import pandas as pd
from typing import List, Tuple

# =============================================================================
# PROYECTO 2: CADENA DE MARKOV DE 4 ESTADOS
# An√°lisis del comportamiento de una m√°quina industrial
# =============================================================================

class CadenaMarkov4Estados:
    """
    Clase para simular y analizar una Cadena de Markov de 4 estados
    que representa el comportamiento de una m√°quina industrial.
    """
    
    def __init__(self):
        """
        Inicializa la cadena de Markov con la matriz de transici√≥n y estados.
        
        Estados:
        1 - Operativa
        2 - En mantenimiento preventivo
        3 - En reparaci√≥n
        4 - Fuera de servicio
        """
        # Matriz de transici√≥n P
        self.P = np.array([
            [0.8, 0.1, 0.1, 0.0],  # Desde Operativa
            [0.6, 0.3, 0.1, 0.0],  # Desde Mantenimiento preventivo
            [0.2, 0.3, 0.4, 0.1],  # Desde Reparaci√≥n
            [0.0, 0.1, 0.4, 0.5]   # Desde Fuera de servicio
        ])
        
        # Estado inicial (d√≠a 0): m√°quina operativa
        self.estado_inicial = np.array([1, 0, 0, 0])
        
        # Nombres de los estados
        self.nombres_estados = [
            "Operativa",
            "En mantenimiento preventivo",
            "En reparaci√≥n",
            "Fuera de servicio"
        ]
    
    def simular_paso_a_paso(self, dias: int = 10) -> pd.DataFrame:
        """
        Simula la evoluci√≥n de la cadena de Markov d√≠a a d√≠a.
        
        Args:
            dias: N√∫mero de d√≠as a simular (por defecto 10)
            
        Returns:
            DataFrame con las probabilidades de cada estado por d√≠a
        """
        print("=" * 80)
        print("ACTIVIDAD 1: SIMULACI√ìN PASO A PASO (D√çA 1 AL 10)")
        print("=" * 80)
        
        # Almacenar resultados
        resultados = []
        estado_actual = self.estado_inicial.copy()
        
        # D√≠a 0 (estado inicial)
        resultados.append({
            'D√≠a': 0,
            'Operativa': estado_actual[0],
            'Mantenimiento': estado_actual[1],
            'Reparaci√≥n': estado_actual[2],
            'Fuera de servicio': estado_actual[3]
        })
        
        print("\nüìä C√ÅLCULO MANUAL DE LOS PRIMEROS 3 PASOS:\n")
        
        # Simular cada d√≠a
        for dia in range(1, dias + 1):
            # Calcular siguiente estado: œÄ(n) = œÄ(n-1) * P
            estado_nuevo = estado_actual @ self.P
            
            # Mostrar c√°lculo detallado para los primeros 3 d√≠as
            if dia <= 3:
                print(f"D√≠a {dia}:")
                print(f"  œÄ({dia}) = œÄ({dia-1}) √ó P")
                print(f"  œÄ({dia}) = {estado_actual} √ó P")
                print(f"  œÄ({dia}) = {estado_nuevo}")
                print(f"  Probabilidades:")
                for i, nombre in enumerate(self.nombres_estados):
                    print(f"    {nombre}: {estado_nuevo[i]:.4f} ({estado_nuevo[i]*100:.2f}%)")
                print()
            
            resultados.append({
                'D√≠a': dia,
                'Operativa': estado_nuevo[0],
                'Mantenimiento': estado_nuevo[1],
                'Reparaci√≥n': estado_nuevo[2],
                'Fuera de servicio': estado_nuevo[3]
            })
            
            estado_actual = estado_nuevo.copy()
        
        df_resultados = pd.DataFrame(resultados)
        
        print("\nüìã TABLA COMPLETA DE SIMULACI√ìN (D√çA 0 AL 10):")
        print("-" * 80)
        print(df_resultados.to_string(index=False, float_format='%.6f'))
        print()
        
        return df_resultados
    
    def analizar_evolucion(self, df_resultados: pd.DataFrame) -> None:
        """
        Analiza la evoluci√≥n de las probabilidades a lo largo del tiempo.
        
        Args:
            df_resultados: DataFrame con los resultados de la simulaci√≥n
        """
        print("\n" + "=" * 80)
        print("ACTIVIDAD 2: AN√ÅLISIS DE EVOLUCI√ìN")
        print("=" * 80)
        
        # Probabilidades en d√≠a 5
        dia_5 = df_resultados[df_resultados['D√≠a'] == 5].iloc[0]
        print("\nüìå PROBABILIDADES AL D√çA 5:")
        print(f"  ‚Ä¢ Operativa: {dia_5['Operativa']:.6f} ({dia_5['Operativa']*100:.2f}%)")
        print(f"  ‚Ä¢ Mantenimiento: {dia_5['Mantenimiento']:.6f} ({dia_5['Mantenimiento']*100:.2f}%)")
        print(f"  ‚Ä¢ Reparaci√≥n: {dia_5['Reparaci√≥n']:.6f} ({dia_5['Reparaci√≥n']*100:.2f}%)")
        print(f"  ‚Ä¢ Fuera de servicio: {dia_5['Fuera de servicio']:.6f} ({dia_5['Fuera de servicio']*100:.2f}%)")
        
        # Probabilidades en d√≠a 10
        dia_10 = df_resultados[df_resultados['D√≠a'] == 10].iloc[0]
        print("\nüìå PROBABILIDADES AL D√çA 10:")
        print(f"  ‚Ä¢ Operativa: {dia_10['Operativa']:.6f} ({dia_10['Operativa']*100:.2f}%)")
        print(f"  ‚Ä¢ Mantenimiento: {dia_10['Mantenimiento']:.6f} ({dia_10['Mantenimiento']*100:.2f}%)")
        print(f"  ‚Ä¢ Reparaci√≥n: {dia_10['Reparaci√≥n']:.6f} ({dia_10['Reparaci√≥n']*100:.2f}%)")
        print(f"  ‚Ä¢ Fuera de servicio: {dia_10['Fuera de servicio']:.6f} ({dia_10['Fuera de servicio']*100:.2f}%)")
        
        # An√°lisis de patr√≥n
        print("\nüîç AN√ÅLISIS DE PATR√ìN:")
        
        # Cambios entre d√≠a 5 y 10
        cambio_operativa = dia_10['Operativa'] - dia_5['Operativa']
        cambio_mantenimiento = dia_10['Mantenimiento'] - dia_5['Mantenimiento']
        cambio_reparacion = dia_10['Reparaci√≥n'] - dia_5['Reparaci√≥n']
        cambio_fuera = dia_10['Fuera de servicio'] - dia_5['Fuera de servicio']
        
        print(f"  Cambio en probabilidad Operativa (d√≠a 5 a 10): {cambio_operativa:+.6f}")
        print(f"  Cambio en probabilidad Mantenimiento (d√≠a 5 a 10): {cambio_mantenimiento:+.6f}")
        print(f"  Cambio en probabilidad Reparaci√≥n (d√≠a 5 a 10): {cambio_reparacion:+.6f}")
        print(f"  Cambio en probabilidad Fuera de servicio (d√≠a 5 a 10): {cambio_fuera:+.6f}")
        
        print("\n  Observaci√≥n:")
        if abs(cambio_operativa) < 0.001:
            print("  ‚úì Las probabilidades se est√°n estabilizando (convergiendo al estado estacionario)")
        else:
            print("  ‚ö† Las probabilidades a√∫n est√°n cambiando significativamente")
    
    def calcular_estado_estacionario(self) -> np.ndarray:
        """
        Calcula el estado estacionario resolviendo el sistema: œÄ = œÄP y Œ£œÄ = 1
        
        Returns:
            Vector de probabilidades del estado estacionario
        """
        # Resolver (P^T - I)œÄ = 0, sujeto a Œ£œÄ = 1
        n = len(self.P)
        
        # Crear sistema de ecuaciones
        A = self.P.T - np.eye(n)
        # Reemplazar √∫ltima ecuaci√≥n con la restricci√≥n de suma
        A[-1] = np.ones(n)
        b = np.zeros(n)
        b[-1] = 1
        
        # Resolver sistema
        pi_estacionario = np.linalg.solve(A, b)
        
        return pi_estacionario
    
    def interpretar_resultados(self, pi_estacionario: np.ndarray) -> None:
        """
        Interpreta los resultados y responde las preguntas del proyecto.
        
        Args:
            pi_estacionario: Vector de probabilidades del estado estacionario
        """
        print("\n" + "=" * 80)
        print("ACTIVIDAD 3: INTERPRETACI√ìN DE RESULTADOS")
        print("=" * 80)
        
        print("\nüéØ ESTADO ESTACIONARIO (Probabilidades a largo plazo):")
        print("-" * 80)
        for i, nombre in enumerate(self.nombres_estados):
            print(f"  {nombre}: {pi_estacionario[i]:.6f} ({pi_estacionario[i]*100:.2f}%)")
        
        print("\n\n‚ùì PREGUNTA 1: ¬øCu√°l es la probabilidad a largo plazo de que la m√°quina est√© operativa?")
        print(f"  üìç RESPUESTA: {pi_estacionario[0]:.6f} o {pi_estacionario[0]*100:.2f}%")
        print(f"     A largo plazo, la m√°quina estar√° operativa aproximadamente {pi_estacionario[0]*100:.1f}% del tiempo.")
        
        # Calcular confiabilidad del sistema
        prob_funcionamiento = pi_estacionario[0] + pi_estacionario[1]  # Operativa + Mantenimiento
        
        print("\n\n‚ùì PREGUNTA 2: ¬øQu√© tan confiable es el sistema?")
        print(f"  üìç RESPUESTA: La confiabilidad del sistema es {prob_funcionamiento:.6f} o {prob_funcionamiento*100:.2f}%")
        print(f"     (Estados funcionales: Operativa + Mantenimiento preventivo)")
        print(f"     Desglose:")
        print(f"       ‚Ä¢ Operativa: {pi_estacionario[0]*100:.2f}%")
        print(f"       ‚Ä¢ Mantenimiento preventivo: {pi_estacionario[1]*100:.2f}%")
        print(f"       ‚Ä¢ En reparaci√≥n: {pi_estacionario[2]*100:.2f}%")
        print(f"       ‚Ä¢ Fuera de servicio: {pi_estacionario[3]*100:.2f}%")
        
        if prob_funcionamiento >= 0.85:
            evaluacion = "EXCELENTE"
        elif prob_funcionamiento >= 0.70:
            evaluacion = "BUENA"
        elif prob_funcionamiento >= 0.50:
            evaluacion = "ACEPTABLE"
        else:
            evaluacion = "DEFICIENTE"
        
        print(f"\n     Evaluaci√≥n: {evaluacion}")
        
        print("\n\n‚ùì PREGUNTA 3: ¬øQu√© mejoras sugerir√≠as al modelo?")
        print("  üìç SUGERENCIAS DE MEJORA:")
        print()
        
        # Analizar la matriz de transici√≥n para sugerencias
        if pi_estacionario[2] + pi_estacionario[3] > 0.20:
            print("  1. üîß AUMENTAR FRECUENCIA DE MANTENIMIENTO PREVENTIVO:")
            print("     ‚Ä¢ Actualmente, hay una probabilidad significativa de reparaci√≥n y fuera de servicio")
            print("     ‚Ä¢ Aumentar P[0‚Üí1] (Operativa ‚Üí Mantenimiento) de 0.1 a 0.15")
            print("     ‚Ä¢ Reducir P[0‚Üí2] (Operativa ‚Üí Reparaci√≥n) de 0.1 a 0.05")
            print("     ‚Ä¢ Esto reducir√≠a las fallas catastr√≥ficas")
            print()
        
        print("  2. üìà MEJORAR EFICIENCIA DEL MANTENIMIENTO:")
        print("     ‚Ä¢ Aumentar P[1‚Üí0] (Mantenimiento ‚Üí Operativa) de 0.6 a 0.75")
        print("     ‚Ä¢ Reducir P[1‚Üí2] (Mantenimiento ‚Üí Reparaci√≥n) de 0.1 a 0.05")
        print("     ‚Ä¢ Capacitar mejor al personal de mantenimiento")
        print()
        
        print("  3. üöÄ MEJORAR CAPACIDAD DE REPARACI√ìN:")
        print("     ‚Ä¢ Aumentar P[2‚Üí0] (Reparaci√≥n ‚Üí Operativa) de 0.2 a 0.4")
        print("     ‚Ä¢ Reducir P[2‚Üí3] (Reparaci√≥n ‚Üí Fuera de servicio) de 0.1 a 0.05")
        print("     ‚Ä¢ Tener repuestos cr√≠ticos en stock")
        print()
        
        print("  4. üí∞ AN√ÅLISIS COSTO-BENEFICIO:")
        print("     ‚Ä¢ Comparar el costo del mantenimiento preventivo adicional")
        print("     ‚Ä¢ versus el costo de tiempo fuera de servicio y reparaciones mayores")
        print()
    
    def simular_escenario_mejorado(self) -> None:
        """
        Simula un escenario con las mejoras sugeridas para comparar.
        """
        print("\n" + "=" * 80)
        print("SIMULACI√ìN DE ESCENARIO MEJORADO")
        print("=" * 80)
        
        # Matriz mejorada con las sugerencias
        P_mejorada = np.array([
            [0.70, 0.15, 0.05, 0.10],  # M√°s mantenimiento preventivo
            [0.75, 0.20, 0.05, 0.00],  # Mejor retorno a operativa
            [0.40, 0.30, 0.25, 0.05],  # Mejor capacidad de reparaci√≥n
            [0.00, 0.20, 0.30, 0.50]   # Fuera de servicio
        ])
        
        # Calcular estado estacionario mejorado
        n = len(P_mejorada)
        A = P_mejorada.T - np.eye(n)
        A[-1] = np.ones(n)
        b = np.zeros(n)
        b[-1] = 1
        pi_mejorado = np.linalg.solve(A, b)
        
        print("\nüìä COMPARACI√ìN: Estado Actual vs. Mejorado")
        print("-" * 80)
        print(f"{'Estado':<30} {'Actual':<15} {'Mejorado':<15} {'Cambio':<15}")
        print("-" * 80)
        
        pi_actual = self.calcular_estado_estacionario()
        
        for i, nombre in enumerate(self.nombres_estados):
            cambio = pi_mejorado[i] - pi_actual[i]
            print(f"{nombre:<30} {pi_actual[i]*100:>6.2f}%        {pi_mejorado[i]*100:>6.2f}%        {cambio*100:>+6.2f}%")
        
        print("-" * 80)
        prob_func_actual = pi_actual[0] + pi_actual[1]
        prob_func_mejorado = pi_mejorado[0] + pi_mejorado[1]
        print(f"{'CONFIABILIDAD TOTAL':<30} {prob_func_actual*100:>6.2f}%        {prob_func_mejorado*100:>6.2f}%        {(prob_func_mejorado-prob_func_actual)*100:>+6.2f}%")
        print()
    
    def ejecutar_analisis_completo(self) -> None:
        """
        Ejecuta el an√°lisis completo del proyecto.
        """
        print("\n")
        print("‚ïî" + "=" * 78 + "‚ïó")
        print("‚ïë" + " " * 78 + "‚ïë")
        print("‚ïë" + "    PROYECTO 2: CADENA DE MARKOV DE 4 ESTADOS".center(78) + "‚ïë")
        print("‚ïë" + "    An√°lisis del Comportamiento de una M√°quina Industrial".center(78) + "‚ïë")
        print("‚ïë" + " " * 78 + "‚ïë")
        print("‚ïö" + "=" * 78 + "‚ïù")
        print()
        
        print("üìã INFORMACI√ìN DEL SISTEMA:")
        print("-" * 80)
        print("Estados posibles:")
        for i, nombre in enumerate(self.nombres_estados, 1):
            print(f"  {i}. {nombre}")
        print()
        print("Matriz de Transici√≥n P:")
        print(self.P)
        print()
        print("Estado Inicial (D√≠a 0):")
        print(f"  œÄ(0) = {self.estado_inicial}  [M√°quina operativa]")
        print()
        
        # 1. Simulaci√≥n paso a paso
        df_resultados = self.simular_paso_a_paso(dias=10)
        
        # 2. An√°lisis de evoluci√≥n
        self.analizar_evolucion(df_resultados)
        
        # 3. C√°lculo del estado estacionario
        pi_estacionario = self.calcular_estado_estacionario()
        
        # 4. Interpretaci√≥n de resultados
        self.interpretar_resultados(pi_estacionario)
        
        # 5. Simulaci√≥n de escenario mejorado
        self.simular_escenario_mejorado()
        
        print("\n" + "=" * 80)
        print("‚úÖ AN√ÅLISIS COMPLETADO")
        print("=" * 80)
        print()


# =============================================================================
# FUNCI√ìN PRINCIPAL 
# =============================================================================

def main():
    """
    Funci√≥n principal que ejecuta el proyecto completo.
    """
    # Crear instancia de la cadena de Markov
    cadena = CadenaMarkov4Estados()
    
    # Ejecutar an√°lisis completo
    cadena.ejecutar_analisis_completo()

if __name__ == "__main__":
    main()